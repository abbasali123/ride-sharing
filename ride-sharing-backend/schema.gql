# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type vehicle {
  name: String!
  description: String!
  iconUrl: String!
  id: String!
  ridePricing: [ridePricing!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type pricingTiers {
  name: String!
  description: String!
  basePrice: String!
  perMileRate: String!
  perMinuteRate: String!
  id: String!
  ridePricing: [ridePricing!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ridePricing {
  ride: ride
  rideId: String
  vehicleId: String
  pricingTiersId: String
  id: String!
  vehicle: vehicle!
  pricingTiers: pricingTiers!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type message {
  content: String
  senderId: String
  chatId: String
  chat: chat
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type chat {
  rideId: String
  ride: ride
  messages: [message!]
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ride {
  origin: String!
  destination: String!
  departureTime: String!
  distance: String
  availableSeats: String!
  price: String!
  status: rideStatus!
  passengers: String!
  rideCode: String!
  pickupNotes: String!
  feedback: String!
  rating: Int!
  customer: users
  customerId: String
  driver: users
  driverId: String
  chat: chat
  id: String!
  ridePricing: [ridePricing!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""The supported ride status."""
enum rideStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

type users {
  username: String!
  email: String!
  password: String!
  first_name: String!
  last_name: String!
  customerRides: [ride!]
  driverRides: [ride!]
  role: userRoles!
  id: Float!
}

"""The supported roles."""
enum userRoles {
  DRIVER
  CUSTOMER
  USER
  ADMIN
}

type LoginObject {
  user: users!
  accessToken: String!
}

type Query {
  findAllUsers: [users!]!
  user(id: Int!): users!
  findAllRides(getAllRideInput: GetAllRideInput!): [ride!]!
  findAllVehicles(getAllVehicleInput: GetAllVehicleInput): [vehicle!]!
  chats: [chat!]!
  chat(id: String!): chat!
  findByRideId(rideId: String!): chat!
  messages: [message!]!
  message(id: String!): message!
  findByChatId(chatId: String!): [message!]!
}

input GetAllRideInput {
  id: String
}

input GetAllVehicleInput {
  id: String
  name: String
  description: String
  iconUrl: String
}

type Mutation {
  signUp(createUserInput: CreateUserInput!): users!
  updateUser(updateUserInput: UpdateUserInput!): users!
  removeUser(id: Int!): users!
  createRide(createRideInput: CreateRideInput!): ride!
  addPickupNotes(rideId: String!, pickupNotes: String!): ride!
  addFeedback(feedbackInput: FeedbackInput!): ride!
  acceptRide(acceptRideInput: AcceptRideInput!): ride!
  login(username: String!, password: String!): LoginObject!
  createChat(createChatInput: CreateChatInput!): chat!
  removeChat(id: String!): chat!
  createMessage(createMessageInput: CreateMessageInput!): message!
  removeMessage(id: String!): message!
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
  first_name: String!
  last_name: String!
  role: userRoles = USER
}

input UpdateUserInput {
  username: String
  password: String
  email: String
  first_name: String
  last_name: String
  role: userRoles = USER
  id: Int!
}

input CreateRideInput {
  originLat: String!
  originLong: String!
  destinationLat: String!
  destinationLong: String!
  departureTime: String!
  distance: String
  status: rideStatus = SCHEDULED
  vehicleId: String!
  pricingTiersId: String!
  time: String!
  customerId: Int!
}

input FeedbackInput {
  rideId: String!
  rating: Int!
  feedback: String!
}

input AcceptRideInput {
  rideId: String!
  driverId: Int!
}

input CreateChatInput {
  rideId: String!
}

input CreateMessageInput {
  chatId: String!
  senderId: String!
  content: String!
}

type Subscription {
  onNewMessageSent(chatId: String!): message!
}